{"version":3,"sources":["webpack:///./js/task01.js","webpack:///./js/task02.js","webpack:///./js/task03.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAaA,EAAQ,SAAAC,GAQnB,OANgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WAEXF,EADaF,KAEZA,OAKCK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCChBJK,EAAQ,CACnB,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGZC,EAAkB,SAACC,EAAUC,GACxC,OAAO,IAAId,SAAQ,SAAAC,GAKjBA,EAJqBY,EAASE,KAC3B,SAAAC,GAAI,OACHA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAOxDZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAEpDL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCrB5B,IAIMe,EAAkB,SAACC,GAC9B,IALwCC,EAAKC,EAKvCxB,GALkCuB,EAKA,IALKC,EAKA,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAgBpD,OAXiB,IAAIrB,SAAQ,SAACC,EAASC,GACrCC,YAAW,WACUoB,KAAKE,SAAW,IAGjCxB,EAAQ,CAAEyB,GAAIN,EAAYM,GAAIrB,KAAMP,IAEpCI,EAAO,CAACwB,GAAIN,EAAYM,OAEzB5B,OAKD6B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIrB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CrB,EAA9C,OAGIuB,EAAW,SAAC,GAAW,IAATF,EAAS,EAATA,GAClBpB,QAAQuB,KAAR,gCAA6CH,EAA7C,8BAIFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,K","file":"main.665b701055f5cc3a00f8.js","sourcesContent":["export const delay = ms => {\r\n  \r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n    const time = ms\r\n    resolve(time);\r\n  }, ms);\r\n  });  \r\n  return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","export const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nexport const toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map\r\n      (user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      );\r\n    resolve(updatedUsers);\r\n})\r\n  \r\n};\r\n\r\nexport const logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","export const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nexport const makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n   const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } \r\n        reject({id: transaction.id});\r\n      \r\n    }, delay);\r\n   });\r\n  return promise;\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = ({ id }) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}